{
  "C:\\Users\\User\\Desktop\\backend-PO\\New Backend": {
    "versionSfCore": null,
    "versionFramework": "4.2.4",
    "isWithinCompose": false,
    "isCompose": false,
    "composeOrgName": null,
    "composeResolverProviders": {
      "default-aws-credential-resolver": "<REDACTED>"
    },
    "composeServiceName": null,
    "servicePath": "C:\\Users\\User\\Desktop\\backend-PO\\New Backend",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "org": "khalil1",
      "app": "Backend",
      "service": "Backend",
      "provider": {
        "name": "aws",
        "runtime": "nodejs20.x",
        "vpc": {
          "securityGroupIds": [
            "sg-0ed40a5999e1650e0"
          ],
          "subnetIds": [
            "subnet-0dbe603c213c8c82d",
            "subnet-0bff18fbd7188e54b",
            "subnet-03484be23648c333e",
            "subnet-0c623cae1caa5f231",
            "subnet-0197af1832aebc247",
            "subnet-07e8ac42dc572ddcc"
          ]
        },
        "environment": {
          "DB_HOST": "posystemdb.cjeu04uek25d.us-east-1.rds.amazonaws.com",
          "DB_USER": "admin",
          "DB_PASSWORD": "<REDACTED>",
          "DB_NAME": "POSystemdb",
          "DB_PORT": "3306"
        },
        "stage": "dev",
        "region": "us-east-1",
        "versionFunctions": true,
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "ServerlessDeploymentBucket": {
              "Type": "AWS::S3::Bucket",
              "Properties": {
                "BucketEncryption": {
                  "ServerSideEncryptionConfiguration": [
                    {
                      "ServerSideEncryptionByDefault": {
                        "SSEAlgorithm": "AES256"
                      }
                    }
                  ]
                }
              }
            },
            "ServerlessDeploymentBucketPolicy": {
              "Type": "AWS::S3::BucketPolicy",
              "Properties": {
                "Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "PolicyDocument": {
                  "Statement": [
                    {
                      "Action": "s3:*",
                      "Effect": "Deny",
                      "Principal": "*",
                      "Resource": [
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":s3:::",
                              {
                                "Ref": "ServerlessDeploymentBucket"
                              },
                              "/*"
                            ]
                          ]
                        },
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":s3:::",
                              {
                                "Ref": "ServerlessDeploymentBucket"
                              }
                            ]
                          ]
                        }
                      ],
                      "Condition": {
                        "Bool": {
                          "aws:SecureTransport": false
                        }
                      }
                    }
                  ]
                }
              }
            },
            "CreateUserLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/Backend-dev-createUser"
              }
            },
            "GetAllUsersLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/Backend-dev-getAllUsers"
              }
            },
            "UpdateUserLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/Backend-dev-updateUser"
              }
            },
            "DeleteUserLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/Backend-dev-deleteUser"
              }
            },
            "GetOrdersLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/Backend-dev-getOrders"
              }
            },
            "GetOrderByIdWorkerLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/Backend-dev-getOrderByIdWorker"
              }
            },
            "CreateOrderLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/Backend-dev-createOrder"
              }
            },
            "IamRoleLambdaExecution": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": {
                      "Fn::Join": [
                        "-",
                        [
                          "Backend",
                          "dev",
                          "lambda"
                        ]
                      ]
                    },
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogStream",
                            "logs:CreateLogGroup",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/Backend-dev*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:PutLogEvents"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/Backend-dev*:*:*"
                            }
                          ]
                        }
                      ]
                    }
                  }
                ],
                "Path": "/",
                "RoleName": {
                  "Fn::Join": [
                    "-",
                    [
                      "Backend",
                      "dev",
                      {
                        "Ref": "AWS::Region"
                      },
                      "lambdaRole"
                    ]
                  ]
                },
                "ManagedPolicyArns": [
                  {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
                      ]
                    ]
                  }
                ]
              }
            },
            "CreateUserLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": {
                    "Ref": "ServerlessDeploymentBucket"
                  },
                  "S3Key": "serverless/Backend/dev/1725011381695-2024-08-30T09:49:41.695Z/Backend-createUser.zip"
                },
                "Handler": "modules/users/controller.createUser",
                "Runtime": "nodejs20.x",
                "FunctionName": "Backend-dev-createUser",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "DB_HOST": "posystemdb.cjeu04uek25d.us-east-1.rds.amazonaws.com",
                    "DB_USER": "admin",
                    "DB_PASSWORD": "<REDACTED>",
                    "DB_NAME": "POSystemdb",
                    "DB_PORT": "3306",
                    "NODE_OPTIONS": "--enable-source-maps"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                },
                "VpcConfig": {
                  "SecurityGroupIds": [
                    "sg-0ed40a5999e1650e0"
                  ],
                  "SubnetIds": [
                    "subnet-0dbe603c213c8c82d",
                    "subnet-0bff18fbd7188e54b",
                    "subnet-03484be23648c333e",
                    "subnet-0c623cae1caa5f231",
                    "subnet-0197af1832aebc247",
                    "subnet-07e8ac42dc572ddcc"
                  ]
                }
              },
              "DependsOn": [
                "CreateUserLogGroup"
              ]
            },
            "GetAllUsersLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": {
                    "Ref": "ServerlessDeploymentBucket"
                  },
                  "S3Key": "serverless/Backend/dev/1725011381695-2024-08-30T09:49:41.695Z/Backend-getAllUsers.zip"
                },
                "Handler": "modules/users/controller.getAllUsers",
                "Runtime": "nodejs20.x",
                "FunctionName": "Backend-dev-getAllUsers",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "DB_HOST": "posystemdb.cjeu04uek25d.us-east-1.rds.amazonaws.com",
                    "DB_USER": "admin",
                    "DB_PASSWORD": "<REDACTED>",
                    "DB_NAME": "POSystemdb",
                    "DB_PORT": "3306",
                    "NODE_OPTIONS": "--enable-source-maps"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                },
                "VpcConfig": {
                  "SecurityGroupIds": [
                    "sg-0ed40a5999e1650e0"
                  ],
                  "SubnetIds": [
                    "subnet-0dbe603c213c8c82d",
                    "subnet-0bff18fbd7188e54b",
                    "subnet-03484be23648c333e",
                    "subnet-0c623cae1caa5f231",
                    "subnet-0197af1832aebc247",
                    "subnet-07e8ac42dc572ddcc"
                  ]
                }
              },
              "DependsOn": [
                "GetAllUsersLogGroup"
              ]
            },
            "UpdateUserLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": {
                    "Ref": "ServerlessDeploymentBucket"
                  },
                  "S3Key": "serverless/Backend/dev/1725011381695-2024-08-30T09:49:41.695Z/Backend-updateUser.zip"
                },
                "Handler": "modules/users/controller.updateUser",
                "Runtime": "nodejs20.x",
                "FunctionName": "Backend-dev-updateUser",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "DB_HOST": "posystemdb.cjeu04uek25d.us-east-1.rds.amazonaws.com",
                    "DB_USER": "admin",
                    "DB_PASSWORD": "<REDACTED>",
                    "DB_NAME": "POSystemdb",
                    "DB_PORT": "3306",
                    "NODE_OPTIONS": "--enable-source-maps"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                },
                "VpcConfig": {
                  "SecurityGroupIds": [
                    "sg-0ed40a5999e1650e0"
                  ],
                  "SubnetIds": [
                    "subnet-0dbe603c213c8c82d",
                    "subnet-0bff18fbd7188e54b",
                    "subnet-03484be23648c333e",
                    "subnet-0c623cae1caa5f231",
                    "subnet-0197af1832aebc247",
                    "subnet-07e8ac42dc572ddcc"
                  ]
                }
              },
              "DependsOn": [
                "UpdateUserLogGroup"
              ]
            },
            "DeleteUserLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": {
                    "Ref": "ServerlessDeploymentBucket"
                  },
                  "S3Key": "serverless/Backend/dev/1725011381695-2024-08-30T09:49:41.695Z/Backend-deleteUser.zip"
                },
                "Handler": "modules/users/controller.deleteUser",
                "Runtime": "nodejs20.x",
                "FunctionName": "Backend-dev-deleteUser",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "DB_HOST": "posystemdb.cjeu04uek25d.us-east-1.rds.amazonaws.com",
                    "DB_USER": "admin",
                    "DB_PASSWORD": "<REDACTED>",
                    "DB_NAME": "POSystemdb",
                    "DB_PORT": "3306",
                    "NODE_OPTIONS": "--enable-source-maps"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                },
                "VpcConfig": {
                  "SecurityGroupIds": [
                    "sg-0ed40a5999e1650e0"
                  ],
                  "SubnetIds": [
                    "subnet-0dbe603c213c8c82d",
                    "subnet-0bff18fbd7188e54b",
                    "subnet-03484be23648c333e",
                    "subnet-0c623cae1caa5f231",
                    "subnet-0197af1832aebc247",
                    "subnet-07e8ac42dc572ddcc"
                  ]
                }
              },
              "DependsOn": [
                "DeleteUserLogGroup"
              ]
            },
            "GetOrdersLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": {
                    "Ref": "ServerlessDeploymentBucket"
                  },
                  "S3Key": "serverless/Backend/dev/1725011381695-2024-08-30T09:49:41.695Z/Backend-getOrders.zip"
                },
                "Handler": "modules/orders/order.getAllOrdersHandler",
                "Runtime": "nodejs20.x",
                "FunctionName": "Backend-dev-getOrders",
                "MemorySize": 1024,
                "Timeout": 30,
                "Environment": {
                  "Variables": {
                    "DB_HOST": "posystemdb.cjeu04uek25d.us-east-1.rds.amazonaws.com",
                    "DB_USER": "admin",
                    "DB_PASSWORD": "<REDACTED>",
                    "DB_NAME": "POSystemdb",
                    "DB_PORT": "3306",
                    "NODE_OPTIONS": "--enable-source-maps"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                },
                "VpcConfig": {
                  "SecurityGroupIds": [
                    "sg-0ed40a5999e1650e0"
                  ],
                  "SubnetIds": [
                    "subnet-0dbe603c213c8c82d",
                    "subnet-0bff18fbd7188e54b",
                    "subnet-03484be23648c333e",
                    "subnet-0c623cae1caa5f231",
                    "subnet-0197af1832aebc247",
                    "subnet-07e8ac42dc572ddcc"
                  ]
                }
              },
              "DependsOn": [
                "GetOrdersLogGroup"
              ]
            },
            "GetOrderByIdWorkerLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": {
                    "Ref": "ServerlessDeploymentBucket"
                  },
                  "S3Key": "serverless/Backend/dev/1725011381695-2024-08-30T09:49:41.695Z/Backend-getOrderByIdWorker.zip"
                },
                "Handler": "modules/orders/order.getOrderByIdHandler",
                "Runtime": "nodejs20.x",
                "FunctionName": "Backend-dev-getOrderByIdWorker",
                "MemorySize": 1024,
                "Timeout": 30,
                "Environment": {
                  "Variables": {
                    "DB_HOST": "posystemdb.cjeu04uek25d.us-east-1.rds.amazonaws.com",
                    "DB_USER": "admin",
                    "DB_PASSWORD": "<REDACTED>",
                    "DB_NAME": "POSystemdb",
                    "DB_PORT": "3306",
                    "NODE_OPTIONS": "--enable-source-maps"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                },
                "VpcConfig": {
                  "SecurityGroupIds": [
                    "sg-0ed40a5999e1650e0"
                  ],
                  "SubnetIds": [
                    "subnet-0dbe603c213c8c82d",
                    "subnet-0bff18fbd7188e54b",
                    "subnet-03484be23648c333e",
                    "subnet-0c623cae1caa5f231",
                    "subnet-0197af1832aebc247",
                    "subnet-07e8ac42dc572ddcc"
                  ]
                }
              },
              "DependsOn": [
                "GetOrderByIdWorkerLogGroup"
              ]
            },
            "CreateOrderLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": {
                    "Ref": "ServerlessDeploymentBucket"
                  },
                  "S3Key": "serverless/Backend/dev/1725011381695-2024-08-30T09:49:41.695Z/Backend-createOrder.zip"
                },
                "Handler": "modules/orders/order.createOrderHandler",
                "Runtime": "nodejs20.x",
                "FunctionName": "Backend-dev-createOrder",
                "MemorySize": 1024,
                "Timeout": 30,
                "Environment": {
                  "Variables": {
                    "DB_HOST": "posystemdb.cjeu04uek25d.us-east-1.rds.amazonaws.com",
                    "DB_USER": "admin",
                    "DB_PASSWORD": "<REDACTED>",
                    "DB_NAME": "POSystemdb",
                    "DB_PORT": "3306",
                    "NODE_OPTIONS": "--enable-source-maps"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                },
                "VpcConfig": {
                  "SecurityGroupIds": [
                    "sg-0ed40a5999e1650e0"
                  ],
                  "SubnetIds": [
                    "subnet-0dbe603c213c8c82d",
                    "subnet-0bff18fbd7188e54b",
                    "subnet-03484be23648c333e",
                    "subnet-0c623cae1caa5f231",
                    "subnet-0197af1832aebc247",
                    "subnet-07e8ac42dc572ddcc"
                  ]
                }
              },
              "DependsOn": [
                "CreateOrderLogGroup"
              ]
            },
            "CreateUserLambdaVersionp45fl8BCNf4wBDtfOoFIFGzAENVCZEgOOWfmp4T9RI": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "CreateUserLambdaFunction"
                },
                "CodeSha256": "eIxhE4dK8bAJg2vTLDCDdACSWKBTXwx+LCIrowCaFXE="
              }
            },
            "GetAllUsersLambdaVersionJ7RIv758px5EpibSPM5T7RzpBUMUoc9zwPlUHBUMCA": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetAllUsersLambdaFunction"
                },
                "CodeSha256": "lAsfxZWqZuJnvrexZP5NYRLRLg0ryur8uxXEagZPAhI="
              }
            },
            "DeleteUserLambdaVersionPByjHKXLNquRz2fcyzWzsRACE5DKHf76RccDTIcJQ": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "DeleteUserLambdaFunction"
                },
                "CodeSha256": "eIxhE4dK8bAJg2vTLDCDdACSWKBTXwx+LCIrowCaFXE="
              }
            },
            "UpdateUserLambdaVersionK6zDf2X2OvaZdZVIW51eIfHVPod48GIIwkfedKgJP0": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "UpdateUserLambdaFunction"
                },
                "CodeSha256": "eIxhE4dK8bAJg2vTLDCDdACSWKBTXwx+LCIrowCaFXE="
              }
            },
            "GetOrdersLambdaVersionlzWpUPm7BENRPZBc6J0JGjgqwjPTjeZvTpV4n9z6pz4": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetOrdersLambdaFunction"
                },
                "CodeSha256": "si9Psv/sEfSBr7bB4L5N08l6nIoK+HLkfcvPA2hGycs="
              }
            },
            "GetOrderByIdWorkerLambdaVersion4niaWins5b9FcGMWR84pAZoiBIWQsx3e827EJAkm04": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetOrderByIdWorkerLambdaFunction"
                },
                "CodeSha256": "si9Psv/sEfSBr7bB4L5N08l6nIoK+HLkfcvPA2hGycs="
              }
            },
            "CreateOrderLambdaVersionoUNBuUXamIFzsucQizNecMwxaTe5gCURFerjKJXenyY": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "CreateOrderLambdaFunction"
                },
                "CodeSha256": "si9Psv/sEfSBr7bB4L5N08l6nIoK+HLkfcvPA2hGycs="
              }
            },
            "ApiGatewayRestApi": {
              "Type": "AWS::ApiGateway::RestApi",
              "Properties": {
                "Name": "dev-Backend",
                "EndpointConfiguration": {
                  "Types": [
                    "EDGE"
                  ]
                },
                "Policy": ""
              }
            },
            "ApiGatewayResourceUser": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "user",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceUserIdVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceUser"
                },
                "PathPart": "{id}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceUsers": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "users",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodUserPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUser"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "CreateUserLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "CreateUserLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodUsersGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUsers"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetAllUsersLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetAllUsersLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodUserIdVarPut": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "PUT",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUserIdVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "UpdateUserLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "UpdateUserLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodUserIdVarDelete": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "DELETE",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUserIdVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "DeleteUserLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "DeleteUserLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayDeployment1725011376917": {
              "Type": "AWS::ApiGateway::Deployment",
              "Properties": {
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "StageName": "dev"
              },
              "DependsOn": [
                "ApiGatewayMethodUserPost",
                "ApiGatewayMethodUsersGet",
                "ApiGatewayMethodUserIdVarPut",
                "ApiGatewayMethodUserIdVarDelete"
              ]
            },
            "CreateUserLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "CreateUserLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetAllUsersLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetAllUsersLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "UpdateUserLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "UpdateUserLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "DeleteUserLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "DeleteUserLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "HttpApi": {
              "Type": "AWS::ApiGatewayV2::Api",
              "Properties": {
                "Name": "dev-Backend",
                "ProtocolType": "HTTP"
              }
            },
            "HttpApiStage": {
              "Type": "AWS::ApiGatewayV2::Stage",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "StageName": "$default",
                "AutoDeploy": true,
                "DefaultRouteSettings": {
                  "DetailedMetricsEnabled": false
                }
              }
            },
            "GetOrdersLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetOrdersLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationGetOrders": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "GetOrdersLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetOrders": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /orders",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationGetOrders"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationGetOrders"
            },
            "GetOrderByIdWorkerLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetOrderByIdWorkerLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationGetOrderByIdWorker": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "GetOrderByIdWorkerLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetOrdersIdVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /orders/{id}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationGetOrderByIdWorker"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationGetOrderByIdWorker"
            },
            "CreateOrderLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "CreateOrderLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationCreateOrder": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "CreateOrderLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePostCreateorders": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "POST /createorders",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationCreateOrder"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationCreateOrder"
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "Export": {
                "Name": "sls-Backend-dev-ServerlessDeploymentBucketName"
              }
            },
            "CreateUserLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "CreateUserLambdaVersionp45fl8BCNf4wBDtfOoFIFGzAENVCZEgOOWfmp4T9RI"
              },
              "Export": {
                "Name": "sls-Backend-dev-CreateUserLambdaFunctionQualifiedArn"
              }
            },
            "GetAllUsersLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetAllUsersLambdaVersionJ7RIv758px5EpibSPM5T7RzpBUMUoc9zwPlUHBUMCA"
              },
              "Export": {
                "Name": "sls-Backend-dev-GetAllUsersLambdaFunctionQualifiedArn"
              }
            },
            "DeleteUserLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "DeleteUserLambdaVersionPByjHKXLNquRz2fcyzWzsRACE5DKHf76RccDTIcJQ"
              },
              "Export": {
                "Name": "sls-Backend-dev-DeleteUserLambdaFunctionQualifiedArn"
              }
            },
            "UpdateUserLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "UpdateUserLambdaVersionK6zDf2X2OvaZdZVIW51eIfHVPod48GIIwkfedKgJP0"
              },
              "Export": {
                "Name": "sls-Backend-dev-UpdateUserLambdaFunctionQualifiedArn"
              }
            },
            "GetOrdersLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetOrdersLambdaVersionlzWpUPm7BENRPZBc6J0JGjgqwjPTjeZvTpV4n9z6pz4"
              },
              "Export": {
                "Name": "sls-Backend-dev-GetOrdersLambdaFunctionQualifiedArn"
              }
            },
            "GetOrderByIdWorkerLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetOrderByIdWorkerLambdaVersion4niaWins5b9FcGMWR84pAZoiBIWQsx3e827EJAkm04"
              },
              "Export": {
                "Name": "sls-Backend-dev-GetOrderByIdWorkerLambdaFunctionQualifiedArn"
              }
            },
            "CreateOrderLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "CreateOrderLambdaVersionoUNBuUXamIFzsucQizNecMwxaTe5gCURFerjKJXenyY"
              },
              "Export": {
                "Name": "sls-Backend-dev-CreateOrderLambdaFunctionQualifiedArn"
              }
            },
            "ServiceEndpoint": {
              "Description": "URL of the service endpoint",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    },
                    "/dev"
                  ]
                ]
              },
              "Export": {
                "Name": "sls-Backend-dev-ServiceEndpoint"
              }
            },
            "HttpApiId": {
              "Description": "Id of the HTTP API",
              "Value": {
                "Ref": "HttpApi"
              },
              "Export": {
                "Name": "sls-Backend-dev-HttpApiId"
              }
            },
            "HttpApiUrl": {
              "Description": "URL of the HTTP API",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "HttpApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    }
                  ]
                ]
              },
              "Export": {
                "Name": "sls-Backend-dev-HttpApiUrl"
              }
            }
          }
        },
        "coreCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "ServerlessDeploymentBucket": {
              "Type": "AWS::S3::Bucket",
              "Properties": {
                "BucketEncryption": {
                  "ServerSideEncryptionConfiguration": [
                    {
                      "ServerSideEncryptionByDefault": {
                        "SSEAlgorithm": "AES256"
                      }
                    }
                  ]
                }
              }
            },
            "ServerlessDeploymentBucketPolicy": {
              "Type": "AWS::S3::BucketPolicy",
              "Properties": {
                "Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "PolicyDocument": {
                  "Statement": [
                    {
                      "Action": "s3:*",
                      "Effect": "Deny",
                      "Principal": "*",
                      "Resource": [
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":s3:::",
                              {
                                "Ref": "ServerlessDeploymentBucket"
                              },
                              "/*"
                            ]
                          ]
                        },
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":s3:::",
                              {
                                "Ref": "ServerlessDeploymentBucket"
                              }
                            ]
                          ]
                        }
                      ],
                      "Condition": {
                        "Bool": {
                          "aws:SecureTransport": false
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": {
                "Ref": "ServerlessDeploymentBucket"
              }
            }
          }
        }
      },
      "package": {
        "individually": true,
        "artifactsS3KeyDirname": "serverless/Backend/dev/code-artifacts",
        "artifactDirectoryName": "serverless/Backend/dev/1725011381695-2024-08-30T09:49:41.695Z"
      },
      "functions": {
        "createUser": {
          "handler": "modules/users/controller.createUser",
          "events": [
            {
              "http": {
                "path": "user",
                "method": "post",
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "Backend-dev-createUser",
          "environment": {
            "NODE_OPTIONS": "--enable-source-maps"
          },
          "package": {
            "artifact": "C:\\Users\\User\\Desktop\\backend-PO\\New Backend\\.serverless\\build\\Backend-createUser.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "CreateUserLambdaVersionp45fl8BCNf4wBDtfOoFIFGzAENVCZEgOOWfmp4T9RI"
        },
        "getAllUsers": {
          "handler": "modules/users/controller.getAllUsers",
          "events": [
            {
              "http": {
                "path": "users",
                "method": "get",
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "Backend-dev-getAllUsers",
          "environment": {
            "NODE_OPTIONS": "--enable-source-maps"
          },
          "package": {
            "artifact": "C:\\Users\\User\\Desktop\\backend-PO\\New Backend\\.serverless\\build\\Backend-getAllUsers.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetAllUsersLambdaVersionJ7RIv758px5EpibSPM5T7RzpBUMUoc9zwPlUHBUMCA"
        },
        "updateUser": {
          "handler": "modules/users/controller.updateUser",
          "events": [
            {
              "http": {
                "path": "user/{id}",
                "method": "put",
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "Backend-dev-updateUser",
          "environment": {
            "NODE_OPTIONS": "--enable-source-maps"
          },
          "package": {
            "artifact": "C:\\Users\\User\\Desktop\\backend-PO\\New Backend\\.serverless\\build\\Backend-updateUser.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "UpdateUserLambdaVersionK6zDf2X2OvaZdZVIW51eIfHVPod48GIIwkfedKgJP0"
        },
        "deleteUser": {
          "handler": "modules/users/controller.deleteUser",
          "events": [
            {
              "http": {
                "path": "user/{id}",
                "method": "delete",
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "Backend-dev-deleteUser",
          "environment": {
            "NODE_OPTIONS": "--enable-source-maps"
          },
          "package": {
            "artifact": "C:\\Users\\User\\Desktop\\backend-PO\\New Backend\\.serverless\\build\\Backend-deleteUser.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "DeleteUserLambdaVersionPByjHKXLNquRz2fcyzWzsRACE5DKHf76RccDTIcJQ"
        },
        "getOrders": {
          "handler": "modules/orders/order.getAllOrdersHandler",
          "timeout": 30,
          "events": [
            {
              "httpApi": {
                "path": "/orders",
                "method": "get"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/orders"
            }
          ],
          "name": "Backend-dev-getOrders",
          "environment": {
            "NODE_OPTIONS": "--enable-source-maps"
          },
          "package": {
            "artifact": "C:\\Users\\User\\Desktop\\backend-PO\\New Backend\\.serverless\\build\\Backend-getOrders.zip"
          },
          "memory": 1024,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetOrdersLambdaVersionlzWpUPm7BENRPZBc6J0JGjgqwjPTjeZvTpV4n9z6pz4"
        },
        "getOrderByIdWorker": {
          "handler": "modules/orders/order.getOrderByIdHandler",
          "timeout": 30,
          "events": [
            {
              "httpApi": {
                "path": "/orders/{id}",
                "method": "get"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/orders/{id}"
            }
          ],
          "name": "Backend-dev-getOrderByIdWorker",
          "environment": {
            "NODE_OPTIONS": "--enable-source-maps"
          },
          "package": {
            "artifact": "C:\\Users\\User\\Desktop\\backend-PO\\New Backend\\.serverless\\build\\Backend-getOrderByIdWorker.zip"
          },
          "memory": 1024,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetOrderByIdWorkerLambdaVersion4niaWins5b9FcGMWR84pAZoiBIWQsx3e827EJAkm04"
        },
        "createOrder": {
          "handler": "modules/orders/order.createOrderHandler",
          "timeout": 30,
          "events": [
            {
              "httpApi": {
                "path": "/createorders",
                "method": "post"
              },
              "resolvedMethod": "POST",
              "resolvedPath": "/createorders"
            }
          ],
          "name": "Backend-dev-createOrder",
          "environment": {
            "NODE_OPTIONS": "--enable-source-maps"
          },
          "package": {
            "artifact": "C:\\Users\\User\\Desktop\\backend-PO\\New Backend\\.serverless\\build\\Backend-createOrder.zip"
          },
          "memory": 1024,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "CreateOrderLambdaVersionoUNBuUXamIFzsucQizNecMwxaTe5gCURFerjKJXenyY"
        }
      },
      "plugins": [
        "serverless-offline"
      ],
      "custom": {
        "serverless-offline": {
          "noPrependStageInUrl": true
        },
        "esbuild": {
          "bundle": true,
          "minify": true
        }
      }
    },
    "serviceRawFile": "org: khalil1\r\n\r\napp: Backend\r\n\r\nservice: Backend\r\n\r\nprovider:\r\n  name: aws\r\n  runtime: nodejs20.x\r\n  vpc:\r\n    securityGroupIds:\r\n      - sg-0ed40a5999e1650e0\r\n    subnetIds:\r\n      - subnet-0dbe603c213c8c82d\r\n      - subnet-0bff18fbd7188e54b\r\n      - subnet-03484be23648c333e\r\n      - subnet-0c623cae1caa5f231\r\n      - subnet-0197af1832aebc247\r\n      - subnet-07e8ac42dc572ddcc\r\n  environment:\r\n    DB_HOST: posystemdb.cjeu04uek25d.us-east-1.rds.amazonaws.com\r\n    DB_USER: admin\r\n    DB_PASSWORD: posystem01\r\n    DB_NAME: POSystemdb\r\n    DB_PORT: 3306\r\n\r\npackage:\r\n  individually: true\r\n\r\nfunctions:\r\n  createUser:\r\n    handler: modules/users/controller.createUser\r\n    events:\r\n      - http:\r\n          path: user\r\n          method: post\r\n  getAllUsers:\r\n    handler:  modules/users/controller.getAllUsers\r\n    events:\r\n      - http:\r\n          path: users\r\n          method: get\r\n  updateUser:\r\n    handler:  modules/users/controller.updateUser\r\n    events:\r\n      - http:\r\n          path: user/{id}\r\n          method: put\r\n  deleteUser:\r\n    handler:  modules/users/controller.deleteUser\r\n    events:\r\n      - http:\r\n          path: user/{id}\r\n          method: delete\r\n  getOrders:\r\n    handler:  modules/orders/order.getAllOrdersHandler\r\n    timeout: 30\r\n    events:\r\n      - httpApi:\r\n          path: /orders\r\n          method: get\r\n  getOrderByIdWorker:\r\n    handler:  modules/orders/order.getOrderByIdHandler\r\n    timeout: 30\r\n    events:\r\n      - httpApi:\r\n          path: /orders/{id}\r\n          method: get\r\n  createOrder:\r\n    handler:  modules/orders/order.createOrderHandler\r\n    timeout: 30\r\n    events:\r\n      - httpApi:\r\n          path: /createorders\r\n          method: post\r\n\r\n\r\nplugins:\r\n  - serverless-offline\r\n  #- serverless-esbuild\r\ncustom:\r\n  serverless-offline:\r\n    noPrependStageInUrl: true\r\n  esbuild:\r\n    bundle: true\r\n    minify: true  \r\n\r\n\r\n",
    "command": [
      "deploy"
    ],
    "options": {},
    "error": null,
    "params": {},
    "machineId": "54333bd248fc1fc5ab27c94cf051af77",
    "accessKeyV2": "<REDACTED>",
    "accessKeyV1": "<REDACTED>",
    "orgId": "5ac2ad84-54ae-4e7c-aac0-5897b7439329",
    "orgName": "khalil1",
    "userId": "nRFvp2PLz45llTTF0j",
    "dashboard": {
      "isEnabledForService": true,
      "requiredAuthentication": false,
      "orgFeaturesInUse": {
        "providers": true,
        "monitoring": false
      },
      "orgObservabilityIntegrations": null,
      "serviceAppId": null,
      "serviceProvider": {
        "accessKeyId": "<REDACTED>",
        "secretAccessKey": "<REDACTED>",
        "sessionToken": "<REDACTED>"
      },
      "instanceParameters": null
    },
    "userName": "khalil1",
    "subscription": null,
    "userEmail": "khoulioelset2000@gmail.com",
    "serviceProviderAwsCredentials": "<REDACTED>",
    "serviceProviderAwsAccountId": "891377200709",
    "projectType": "framework",
    "versionSf": "4.2.4",
    "serviceProviderAwsCfStackName": "Backend-dev",
    "integrations": {},
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:us-east-1:891377200709:stack/Backend-dev/ab13d500-6682-11ef-8703-0ea03abc55ff",
    "serviceProviderAwsCfStackCreated": "2024-08-30T03:48:07.479Z",
    "serviceProviderAwsCfStackUpdated": "2024-08-30T09:49:58.060Z",
    "serviceProviderAwsCfStackStatus": "UPDATE_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "CreateOrderLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:891377200709:function:Backend-dev-createOrder:1",
        "Description": "Current Lambda function version",
        "ExportName": "sls-Backend-dev-CreateOrderLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "DeleteUserLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:891377200709:function:Backend-dev-deleteUser:10",
        "Description": "Current Lambda function version",
        "ExportName": "sls-Backend-dev-DeleteUserLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetOrderByIdWorkerLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:891377200709:function:Backend-dev-getOrderByIdWorker:1",
        "Description": "Current Lambda function version",
        "ExportName": "sls-Backend-dev-GetOrderByIdWorkerLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetAllUsersLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:891377200709:function:Backend-dev-getAllUsers:16",
        "Description": "Current Lambda function version",
        "ExportName": "sls-Backend-dev-GetAllUsersLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "UpdateUserLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:891377200709:function:Backend-dev-updateUser:10",
        "Description": "Current Lambda function version",
        "ExportName": "sls-Backend-dev-UpdateUserLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetOrdersLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:891377200709:function:Backend-dev-getOrders:1",
        "Description": "Current Lambda function version",
        "ExportName": "sls-Backend-dev-GetOrdersLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "CreateUserLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:891377200709:function:Backend-dev-createUser:16",
        "Description": "Current Lambda function version",
        "ExportName": "sls-Backend-dev-CreateUserLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "HttpApiId",
        "OutputValue": "ill6774ggh",
        "Description": "Id of the HTTP API",
        "ExportName": "sls-Backend-dev-HttpApiId"
      },
      {
        "OutputKey": "ServiceEndpoint",
        "OutputValue": "https://kdd81t8049.execute-api.us-east-1.amazonaws.com/dev",
        "Description": "URL of the service endpoint",
        "ExportName": "sls-Backend-dev-ServiceEndpoint"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "backend-dev-serverlessdeploymentbucket-ofgyogeoc5gx",
        "ExportName": "sls-Backend-dev-ServerlessDeploymentBucketName"
      },
      {
        "OutputKey": "HttpApiUrl",
        "OutputValue": "https://ill6774ggh.execute-api.us-east-1.amazonaws.com",
        "Description": "URL of the HTTP API",
        "ExportName": "sls-Backend-dev-HttpApiUrl"
      }
    ]
  }
}