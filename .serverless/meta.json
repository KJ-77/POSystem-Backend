{
  "C:\\Users\\User\\Desktop\\backend-PO": {
    "versionSfCore": null,
    "versionFramework": "4.2.4",
    "isWithinCompose": false,
    "isCompose": false,
    "composeOrgName": null,
    "composeResolverProviders": {
      "default-aws-credential-resolver": "<REDACTED>"
    },
    "composeServiceName": null,
    "servicePath": "C:\\Users\\User\\Desktop\\backend-PO",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "app": "backend",
      "service": "Backend",
      "provider": {
        "name": "aws",
        "runtime": "nodejs20.x",
        "environment": {
          "DB_HOST": "posystemdb.cjeu04uek25d.us-east-1.rds.amazonaws.com",
          "DB_USER": "admin",
          "DB_PASSWORD": "<REDACTED>",
          "DB_NAME": "POSystemdb",
          "DB_PORT": 3306
        },
        "iamRoleStatements": [
          {
            "Effect": "Allow",
            "Action": [
              "cognito-idp:AdminCreateUser",
              "cognito-idp:AdminAddUserToGroup",
              "cognito-idp:AdminGetUser",
              "cognito-idp:ListUsers",
              "cognito-idp:AdminListUsers",
              "cognito-idp:AdminUpdateUserAttributes",
              "cognito-idp:AdminDeleteUser"
            ],
            "Resource": "arn:aws:cognito-idp:us-east-1:891377200709:userpool/us-east-1_7np4XcTfB"
          }
        ],
        "stage": "dev",
        "region": "us-east-1",
        "versionFunctions": true
      },
      "package": {
        "individually": true
      },
      "functions": {
        "createUser": {
          "handler": "modules/users/controller.createUser",
          "events": [
            {
              "http": {
                "path": "/user",
                "method": "post",
                "cors": true
              }
            }
          ]
        },
        "getAllUsers": {
          "handler": "modules/users/controller.getAllUsers",
          "events": [
            {
              "http": {
                "path": "/users",
                "method": "get",
                "cors": true
              }
            }
          ]
        },
        "updateUser": {
          "handler": "modules/users/controller.updateUser",
          "events": [
            {
              "http": {
                "path": "/user/{id}",
                "method": "put",
                "cors": true
              }
            }
          ]
        },
        "deleteUser": {
          "handler": "modules/users/controller.deleteUser",
          "events": [
            {
              "http": {
                "path": "/user/{id}",
                "method": "delete",
                "cors": true
              }
            }
          ]
        },
        "getOrders": {
          "handler": "modules/orders/order.getAllOrdersHandler",
          "timeout": 30,
          "events": [
            {
              "http": {
                "path": "/orders",
                "method": "get",
                "cors": true
              }
            }
          ]
        },
        "getOrderByIdWorker": {
          "handler": "modules/orders/order.getOrderByIdHandler",
          "timeout": 30,
          "events": [
            {
              "http": {
                "path": "/orders/{id}",
                "method": "get",
                "cors": true
              }
            }
          ]
        },
        "createOrder": {
          "handler": "modules/orders/order.createOrderHandler",
          "timeout": 30,
          "events": [
            {
              "http": {
                "path": "/createorders/{id}",
                "method": "post",
                "cors": true
              }
            }
          ]
        }
      },
      "plugins": [
        "serverless-offline",
        "serverless-esbuild"
      ],
      "custom": {
        "serverless-offline": {
          "noPrependStageInUrl": true
        },
        "esbuild": {
          "bundle": true,
          "minify": true
        }
      }
    },
    "serviceRawFile": "app: backend  # Make sure this is lowercase\r\n\r\nservice: Backend\r\n\r\nprovider:\r\n  name: aws\r\n  runtime: nodejs20.x\r\n  environment:\r\n    DB_HOST: posystemdb.cjeu04uek25d.us-east-1.rds.amazonaws.com\r\n    DB_USER: admin\r\n    DB_PASSWORD: posystem01\r\n    DB_NAME: POSystemdb\r\n    DB_PORT: 3306\r\n  iamRoleStatements:\r\n    - Effect: Allow\r\n      Action:\r\n        - cognito-idp:AdminCreateUser\r\n        - cognito-idp:AdminAddUserToGroup\r\n        - cognito-idp:AdminGetUser\r\n        - cognito-idp:ListUsers\r\n        - cognito-idp:AdminListUsers\r\n        - cognito-idp:AdminUpdateUserAttributes\r\n        - cognito-idp:AdminDeleteUser\r\n      Resource: arn:aws:cognito-idp:us-east-1:891377200709:userpool/us-east-1_7np4XcTfB\r\n\r\npackage:\r\n  individually: true\r\n\r\nfunctions:\r\n  createUser:\r\n    handler: modules/users/controller.createUser\r\n    events:\r\n      - http:\r\n          path: /user\r\n          method: post\r\n          cors: true\r\n\r\n  getAllUsers:\r\n    handler: modules/users/controller.getAllUsers\r\n    events:\r\n      - http:\r\n          path: /users\r\n          method: get\r\n          cors: true\r\n\r\n  updateUser:\r\n    handler: modules/users/controller.updateUser\r\n    events:\r\n      - http:\r\n          path: /user/{id}\r\n          method: put\r\n          cors: true\r\n\r\n  deleteUser:\r\n    handler: modules/users/controller.deleteUser\r\n    events:\r\n      - http:\r\n          path: /user/{id}\r\n          method: delete\r\n          cors: true\r\n\r\n  getOrders:\r\n    handler: modules/orders/order.getAllOrdersHandler\r\n    timeout: 30\r\n    events:\r\n      - http:\r\n          path: /orders\r\n          method: get\r\n          cors: true\r\n\r\n  getOrderByIdWorker:\r\n    handler: modules/orders/order.getOrderByIdHandler\r\n    timeout: 30\r\n    events:\r\n      - http:\r\n          path: /orders/{id}\r\n          method: get\r\n          cors: true\r\n\r\n  createOrder:\r\n    handler: modules/orders/order.createOrderHandler\r\n    timeout: 30\r\n    events:\r\n      - http:\r\n          path: /createorders/{id}\r\n          method: post\r\n          cors: true\r\n\r\nplugins:\r\n  - serverless-offline\r\n  - serverless-esbuild\r\n\r\ncustom:\r\n  serverless-offline:\r\n    noPrependStageInUrl: true\r\n  esbuild:\r\n    bundle: true\r\n    minify: true\r\n",
    "command": [
      "offline"
    ],
    "options": {},
    "error": {
      "message": "Serverless now includes ESBuild and supports Typescript out-of-the-box. But this conflicts with the plugin 'serverless-esbuild'.\nYou can either remove this plugin and try Serverless's ESBuild support builtin, or you can set 'build.esbuild' to false in your 'serverless.yml'.\nFor more information go to, https://slss.io/buildoptions",
      "stack": "ServerlessError2: Serverless now includes ESBuild and supports Typescript out-of-the-box. But this conflicts with the plugin 'serverless-esbuild'.\nYou can either remove this plugin and try Serverless's ESBuild support builtin, or you can set 'build.esbuild' to false in your 'serverless.yml'.\nFor more information go to, https://slss.io/buildoptions\n    at PluginManager.addPlugin (file:///C:/Users/User/.serverless/releases/4.2.4/package/dist/sf-core.js:884:65)\n    at file:///C:/Users/User/.serverless/releases/4.2.4/package/dist/sf-core.js:884:1435\n    at Array.forEach (<anonymous>)\n    at PluginManager.loadAllPlugins (file:///C:/Users/User/.serverless/releases/4.2.4/package/dist/sf-core.js:884:1413)\n    at async Serverless.init (file:///C:/Users/User/.serverless/releases/4.2.4/package/dist/sf-core.js:891:9782)\n    at async runFramework (file:///C:/Users/User/.serverless/releases/4.2.4/package/dist/sf-core.js:939:880)\n    at async route (file:///C:/Users/User/.serverless/releases/4.2.4/package/dist/sf-core.js:950:16936)\n    at async Object.run2 [as run] (file:///C:/Users/User/.serverless/releases/4.2.4/package/dist/sf-core.js:950:17334)\n    at async run3 (file:///C:/Users/User/.serverless/releases/4.2.4/package/dist/sf-core.js:950:18594)",
      "code": "PLUGIN_TYPESCRIPT_CONFLICT"
    },
    "params": {},
    "machineId": "54333bd248fc1fc5ab27c94cf051af77",
    "accessKeyV2": "<REDACTED>",
    "accessKeyV1": "<REDACTED>",
    "orgId": "5ac2ad84-54ae-4e7c-aac0-5897b7439329",
    "orgName": "khalil1",
    "userId": "nRFvp2PLz45llTTF0j",
    "dashboard": {
      "isEnabledForService": false,
      "requiredAuthentication": false,
      "orgFeaturesInUse": null,
      "orgObservabilityIntegrations": null,
      "serviceAppId": null,
      "serviceProvider": null,
      "instanceParameters": null
    },
    "userName": "khalil1",
    "subscription": null,
    "userEmail": "khoulioelset2000@gmail.com",
    "projectType": "framework",
    "versionSf": "4.2.4",
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:us-east-1:891377200709:stack/ECS-Console-V2-Service-workdude-test-cluster-77025c37/6b33fc90-691a-11ef-b787-12f95bd19e79",
    "serviceProviderAwsCfStackCreated": "2024-09-02T10:59:26.106Z",
    "serviceProviderAwsCfStackUpdated": "2024-09-01T13:18:43.420Z",
    "serviceProviderAwsCfStackStatus": "CREATE_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "TargetGroupTwo",
        "OutputValue": "arn:aws:elasticloadbalancing:us-east-1:891377200709:targetgroup/tg-test-c-workdude-2/e65bfb6507a86243",
        "Description": "The created target group 2."
      },
      {
        "OutputKey": "ECSService",
        "OutputValue": "arn:aws:ecs:us-east-1:891377200709:service/test-cluster/workdude",
        "Description": "The created service."
      },
      {
        "OutputKey": "Listener",
        "OutputValue": "arn:aws:elasticloadbalancing:us-east-1:891377200709:listener/app/elb/dc0332451eb760e5/bfe310f28544d9f9",
        "Description": "The created listener."
      },
      {
        "OutputKey": "CodeDeployDeploymentGroup",
        "OutputValue": "DgpECS-test-cluster-workdude",
        "Description": "The created CodeDeploy deployment group."
      },
      {
        "OutputKey": "TargetGroup",
        "OutputValue": "arn:aws:elasticloadbalancing:us-east-1:891377200709:targetgroup/tg-test-c-workdude/b1d9e4f6146c0f3d",
        "Description": "The created target group."
      },
      {
        "OutputKey": "ClusterName",
        "OutputValue": "test-cluster",
        "Description": "The cluster used to create the service."
      },
      {
        "OutputKey": "LoadBalancer",
        "OutputValue": "arn:aws:elasticloadbalancing:us-east-1:891377200709:loadbalancer/app/elb/dc0332451eb760e5",
        "Description": "The created load balancer."
      },
      {
        "OutputKey": "CodeDeployApplication",
        "OutputValue": "AppECS-test-cluster-workdude",
        "Description": "The created CodeDeploy application."
      }
    ]
  }
}